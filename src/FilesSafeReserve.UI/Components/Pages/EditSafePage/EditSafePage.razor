@page "/virtual-safe/edit/{id}"

@using CommunityToolkit.Maui.Storage
@using FilesSafeReserve.App.Builders.IBuilders
@using FilesSafeReserve.App.Models
@using FilesSafeReserve.App.Services.IServices
@using FilesSafeReserve.Infra.Repositories.IRepositories
@using FilesSafeReserve.Infra.Extensions;

@inject IVirtualSafeRepo VirtualSafeRepo
@inject ILogBuilder LogBuilder
@inject ILogRepo LogRepo
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<Modal @ref="ViewModel.SuccessModal" title="Editing Info" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Virtual Safe was successfully changed.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='() => Navigation.NavigateTo("/virtual-safes")'>OK</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.FailureModal" title="Editing Info" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Virtual Safe in could not be changed.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='() => Navigation.NavigateTo("/virtual-safes")'>OK</Button>
    </FooterTemplate>
</Modal>

<div class="main-container">
    <h3 class="gradient-background">Edit Safe Page</h3>
    <EditForm EditContext="ViewModel.EditContext" OnValidSubmit="OnEditClick" style="width: 100%">
        <DataAnnotationsValidator />

        <div class="edit-container gradient-background">
            <div class="form-floating mb-3 input-container">
                <InputText @bind-Value="ViewModel.VirtualSafe.Name" type="text" class="form-control" id="floatingInput" placeholder="Safe Name" />
                <label for="floatingInput">Safe name</label>
            </div>
            <div class="form-floating input-container">
                <InputTextArea @bind-Value="ViewModel.VirtualSafe.Description" class="form-control" placeholder="Safe Description" id="floatingTextarea2" style="height: 200px"></InputTextArea>
                <label for="floatingTextarea2">Safe description</label>
            </div>
            <div class="btns-container">
                <div class="btns-container-item">
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary"> Edit </Button>
                </div>
                <div class="btns-container-item">
                    <Button onclick="history.back();" Color="ButtonColor.Secondary"> Go Back </Button>
                </div>
            </div>

            @if (ViewModel.EditContext.Validate() is false)
            {
                <div style="width: 90%;">
                    <Alert Color="AlertColor.Danger">
                        <div class="danger-container">
                            <strong>Danger!</strong>
                            <div class="messages-container">
                                @foreach (var message in ViewModel.EditContext.GetValidationMessages())
                                {
                                    <div class="message-container">
                                        <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                                        @message
                                    </div>
                                }
                            </div>
                        </div>
                    </Alert>
                </div>
            }
        </div>
    </EditForm>
</div>

@code
{
    protected async override void OnInitialized()
    {
        var result = await VirtualSafeRepo.GetByIdAsync(new Guid(Id));

        if (result.IsSucceeded)
        {
            ViewModel.VirtualSafe.Name = result.Value!.Name;
            ViewModel.VirtualSafe.Description = result.Value.Description;
            ViewModel.VirtualSafe.Path = result.Value.Path;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("history.back");
        }
    }

    private async Task OnPickClick()
    {
        var result = await FolderPicker.PickAsync(default);

        if (result.Folder is null) return;

        ViewModel.VirtualSafe.Path = result.Folder.Path;
    }

    private async Task OnEditClick()
    {
        var result = await VirtualSafeRepo.GetByIdAsync(new Guid(Id));

        if (result.IsSucceeded)
        {
            result.Value.Name = ViewModel.VirtualSafe.Name;
            result.Value.Description = ViewModel.VirtualSafe.Description;
            result.Value.Details.UpdatedTimestamp = DateTime.Now;

            await LogBuilder
                        .WithDelegate(async () => await VirtualSafeRepo.UpdateAsync(result.Value))
                        .WithParameters(
                            new()
                            {
                                VirtualSafeDetailsId = result.Value.Details.Id,
                                Type = LogOperationModel.Types.UpdateVirtualSafe,
                                ItemPath = result.Value.Path
                            })
                        .BuildAsync()
                        .LogResultAsync(LogRepo);

            await ViewModel.SuccessModal.ShowAsync();
        }
        else
        {
            await ViewModel.FailureModal.ShowAsync();
        }
    }
}

