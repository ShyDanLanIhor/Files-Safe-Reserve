@page "/virtual-safe/create"

@using CommunityToolkit.Maui.Storage
@using FilesSafeReserve.App.Models
@using FilesSafeReserve.Infra.Repositories.IRepositories

@inject IVirtualSafeRepo VirtualSafeRepo
@inject NavigationManager Navigation

@implements IDisposable

<Modal @ref="ViewModel.SuccessModal" title="Creating Info" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Virtual Safe was successfully created.<br>
        You will be redirected to Safes List Page.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='() => Navigation.NavigateTo("/virtual-safes")'>Understood</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.DuplicateModal" title="Duplicate Info" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Virtual Safe in picked directory already exists.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='async () => await ViewModel.DuplicateModal.HideAsync()'>OK</Button>
        <Button Color="ButtonColor.Secondary" @onclick='() => Navigation.NavigateTo("/virtual-safes")'>Go to safes list</Button>
    </FooterTemplate>
</Modal>

<div class="main-container">
    <h3 class="gradient-background">Create Safe Page</h3>
    <EditForm EditContext="ViewModel.EditContext" OnValidSubmit="OnCreateClick" style="width: 100%">
        <DataAnnotationsValidator />

        <div class="create-container gradient-background">
            <div class="form-floating mb-3 input-container">
                <InputText @bind-Value="ViewModel.VirtualSafe.Name" type="text" class="form-control" id="floatingInput" placeholder="Safe Name" />
                <label for="floatingInput">Safe name</label>
            </div>
            <div class="form-floating input-container">
                <InputTextArea @bind-Value="ViewModel.VirtualSafe.Description" class="form-control" placeholder="Leave a description here" id="floatingTextarea2" style="height: 200px"></InputTextArea>
                <label for="floatingTextarea2">Safe description</label>
            </div>
            <div class="input-group mb-3 input-container">
                <InputText @bind-Value="ViewModel.VirtualSafe.Path" type="text" class="form-control" placeholder="Path to safe" aria-label="Path to safe" aria-describedby="basic-addon2" />
                <div class="input-group-append">
                    <Button @onclick="OnPickClick" Color="ButtonColor.Secondary" Style="border-bottom-left-radius: 0px; border-top-left-radius: 0px;">Pick</Button>
                </div>
            </div>
            @if(ViewModel.IsRemovable)
            {
                <div class="alert-container">
                    <Alert Color="AlertColor.Info"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> Your current path leads to removable drive. </Alert>
                </div>
            }
            <div class="btns-container btns-container-grid">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Style="width: 100px"> Create </Button>

                <Button onclick="history.back();" Color="ButtonColor.Secondary" Style="width: 100px"> Go Back </Button>
            </div>

            @if (ViewModel.EditContext.Validate() is false)
            {
                <div style="width: 90%;">
                    <Alert Color="AlertColor.Danger">
                        <div class="danger-container">
                            <strong>Danger!</strong>
                            <div class="messages-container">
                                @foreach (var message in ViewModel.EditContext.GetValidationMessages())
                                {
                                    <div class="message-container">
                                        <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                                        @message
                                    </div>
                                }
                            </div>
                        </div>
                    </Alert>
                </div>
            }
        </div>
    </EditForm>
</div>

@code
{
    protected override void OnInitialized()
    {
        ViewModel.EditContext.OnFieldChanged += OnFieldsChanged;
    }

    public void Dispose()
    {
        ViewModel.EditContext.OnFieldChanged -= OnFieldsChanged;
    }

    private void OnFieldsChanged(object? sender, FieldChangedEventArgs e)
    {
        CheckIfRemovable();
    }

    private async Task OnPickClick()
    {
        var result = await FolderPicker.PickAsync(default);

        if (result.Folder is null) return;

        ViewModel.VirtualSafe.Path = result.Folder.Path;

        CheckIfRemovable();
    }

    private void CheckIfRemovable()
    {
        if (DriveInfo.GetDrives()
                     .Where(drive => drive.DriveType is DriveType.Removable)
                     .Any(drive => ViewModel.VirtualSafe.Path.Contains(drive.Name))) ViewModel.IsRemovable = true;
        else ViewModel.IsRemovable = false;
    }

    private async Task OnCreateClick()
    {
        if (VirtualSafeRepo.ToList()
                           .Where(s => s.Path.Contains(ViewModel.VirtualSafe.Path))
                           .Count() is not 0)
        {
            await ViewModel.DuplicateModal.ShowAsync();
            return;
        }

        Directory.CreateDirectory(ViewModel.VirtualSafe.Path);

        VirtualSafeModel safe = new()
        {
            Name = ViewModel.VirtualSafe.Name,
            Description = ViewModel.VirtualSafe.Description,
            Path = ViewModel.VirtualSafe.Path,
            Details =
            new()
            {
                Logs =
                [
                    new()
                    {
                        StartTimestamp = DateTime.Now,
                        EndTimestamp = DateTime.Now,
                        Operations =
                        [
                            new()
                            {
                                IsSucceeded = true,
                                ItemPath = ViewModel.VirtualSafe.Path,
                                Type = LogOperationModel.Types.CreateVirtualSafe,
                                PerformTimestamp = DateTime.Now,
                            }
                        ]
                    }
                ]
            },
            Reservation = new()
        };

        if (ViewModel.IsRemovable)
        {
            DriveInfo driveInfo = new(safe.Directory.Info.Root.ToString());

            safe.Details.RemovableDrive = new()
            {
                    Name = driveInfo.Name,
                    VolumeLabel = driveInfo.VolumeLabel,
            };
        }

        await VirtualSafeRepo.AddAsync(safe);

        await ViewModel.SuccessModal.ShowAsync();
    }
}

