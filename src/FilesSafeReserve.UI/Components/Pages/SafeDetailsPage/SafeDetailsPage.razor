@page "/virtual-safe/details/{id}"

@using FilesSafeReserve.App.Builders.IBuilders
@using FilesSafeReserve.App.Entities
@using FilesSafeReserve.App.Entities.Params.ILogBuilder
@using FilesSafeReserve.App.Models
@using FilesSafeReserve.Domain.Extensions
@using FilesSafeReserve.Infra.Extensions
@using FilesSafeReserve.Infra.Repositories.IRepositories
@using FilesSafeReserve.Infra.Services.IServices
@using FilesSafeReserve.UI.Data.Stores

@inject NavigationManager Navigation
@inject IVirtualSafeRepo VirtualSafeRepo
@inject IVirtualSafeDetailsRepo VirtualSafeDetailsRepo
@inject IReservationRepo ReservationRepo
@inject ILogRepo LogRepo
@inject IShortcutRepo ShortcutRepo
@inject IFileOpenerService FileOpenerService
@inject ILogBuilder LogBuilder

@implements IDisposable

<Modal @ref="ViewModel.ReserveTimeChangingSucceededModal" title="Reservation Time Changed" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        The reservation time of virtual safe has been changed successfully.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='async () => await ViewModel.ReserveTimeChangingSucceededModal.HideAsync()'>Understood</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.ReserveTimeClearingConfirmModal" title="Reservation Time Changing" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Are you sure you want to clear the reservation time of virtual safe?
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='async () => await OnClearTimeClick()'>Yes</Button>
        <Button Color="ButtonColor.Danger" @onclick='async () => await ViewModel.ReserveTimeClearingConfirmModal.HideAsync()'>No</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.ReserveTimeChangingConfirmModal" title="Reservation Time Changing" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Are you sure you want to change the reservation time of virtual safe?
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='async () => await OnSaveTimeClick()'>Yes</Button>
        <Button Color="ButtonColor.Danger" @onclick='async () => await ViewModel.ReserveTimeChangingConfirmModal.HideAsync()'>No</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.NotEnteredReserveTimeModal" title="Reservation Time Changing" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Please enter a time first to update your virtual safe reservation time.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='async () => await ViewModel.NotEnteredReserveTimeModal.HideAsync()'>Understood</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.DeleteModal" title="Virtual Safe Delete" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Are you sure that you want delete "@ViewModel.VirtualSafe!.Name"
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Danger" @onclick='async () => await OnDeleteSafeClick()'>Delete</Button>
        <Button Color="ButtonColor.Secondary" @onclick='async () => await ViewModel.DeleteModal.HideAsync()'>Cancel</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.DeleteSucceededModal" title="Virtual Safe Deleting" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Virtual safe was deleted.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='() => Navigation.NavigateTo($"/virtual-safes")'>OK</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.DeleteFailedModal" title="Virtual Safe Deleting" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Virtual safe was not deleted.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick='async () => await ViewModel.DeleteFailedModal.HideAsync()'>OK</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.NotFoundModal" title="Virtual Safe Finding" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Virtual safe was not found by id: @Id.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" onclick="history.back()">OK</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.ReservationProgress" title="Reservation Progress" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Please wait for the reservation to complete.
    </BodyTemplate>
    <FooterTemplate>
        <div class="loader-container">
            <span class="loader"></span>
        </div>
    </FooterTemplate>
</Modal>

<div class="main-container">
    <div class="header-container gradient-background">
        <h3>Safe Details Page</h3>
    </div>

    <div class="body-container gradient-background">
        @if (ViewModel.VirtualSafe is not null)
        {
            <div class="name-container">
                <h4>@ViewModel.VirtualSafe.Name</h4>
            </div>

            <div class="virtual-safe-container">
                <div class="description-container">
                    <div class="description-text-container">
                        <div class="description-text-key">
                            Description
                        </div>
                        <span class="description-text-value">
                            @ViewModel.VirtualSafe.Description
                        </span>
                    </div>


                    <div class="description-path-container">
                        <div class="description-path-key">
                            Path:
                        </div>
                        <span class="description-path-value">
                            @ViewModel.VirtualSafe.Path
                        </span>
                    </div>
                </div>

                <div class="timestamp-container">
                    <div class="timestamp-item">
                        <div class="timestamp-item-key">
                            Created On:
                        </div>
                        <span class="timestamp-item-value">
                            @ViewModel.VirtualSafe.Details.CreatedTimestamp
                        </span>
                    </div>
                    <div class="timestamp-item">
                        <div class="timestamp-item-key">
                            Updated On:
                        </div>
                        <span class="timestamp-item-value">
                            @ViewModel.VirtualSafe.Details.UpdatedTimestamp
                        </span>
                    </div>
                    <div class="timestamp-item">
                        <div class="timestamp-item-key">
                            Reserved On:
                        </div>
                        <span class="timestamp-item-value">
                            @ViewModel.VirtualSafe.Details.ReservedTimestamp
                        </span>
                    </div>
                </div>
            </div>

            <div class="btns-container btns-container-grid">
                <Button @onclick='() => Navigation.NavigateTo($"/virtual-safe/edit/{Id}")' Color="ButtonColor.Primary" Style="width: 120px"> Edit </Button>

                <Button @onclick='() => Navigation.NavigateTo($"/virtual-safe/reservation/{Id}")' Color="ButtonColor.Primary" Style="width: 120px"> Reservation </Button>

                <Button @onclick='() => FileOpenerService.Open(ViewModel.VirtualSafe.Directory)' Color="ButtonColor.Primary" Style="width: 120px"> Open </Button>

                <Button @onclick='OnReserveSafeClick' Color="ButtonColor.Primary" Style="width: 120px"> Reserve </Button>

                <Button @onclick='async () => await ViewModel.DeleteModal.ShowAsync()' Color="ButtonColor.Danger" Style="width: 120px"> Delete </Button>

                <Button onclick="history.back();" Color="ButtonColor.Secondary" Style="width: 120px"> Go Back </Button>
            </div>

            <div class="reserve-time-container">
                <div class="reserve-time-header-container">
                    <h5> Reservation time </h5>
                </div>
                <div class="reserve-time-input-container">
                    <div class="form-floating mb-3 input-container">
                        <TimeInput TValue="TimeOnly?" @bind-Value="@ViewModel.ReservationTimeOnly" />
                        <label for="floatingInput">hours:minutes</label>
                    </div>
                </div>
                <div class="reserve-time-btns-container">
                    <Button @onclick='async () => await ViewModel.ReserveTimeChangingConfirmModal.ShowAsync()' Color="ButtonColor.Primary" Style="width: 120px"> Save Time </Button>

                    <Button @onclick='async () => await ViewModel.ReserveTimeClearingConfirmModal.ShowAsync()' Color="ButtonColor.Danger" Style="width: 120px"> Clear Time </Button>
                </div>
            </div>
        }
    </div>
</div>


@code {

    protected async override void OnInitialized()
    {
        var safeResult = await VirtualSafeRepo.GetByIdAsync(new Guid(Id));

        if (safeResult.IsSucceeded is false)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        ViewModel.VirtualSafe = safeResult.Value;
        if (ViewModel.VirtualSafe.Reservation.ToReserveTimeSpan is not null)
        {
            ViewModel.ReservationTimeOnly = new
            (
                ViewModel.VirtualSafe.Reservation.ToReserveTimeSpan.Value.Hours,
                ViewModel.VirtualSafe.Reservation.ToReserveTimeSpan.Value.Minutes
            );
        }

        var openSafeShortcutResult = await ShortcutRepo.GetByTypeAsync(ShortcutModel.Types.OpenVirtualSafe);
        var reserveSafeShortcutResult = await ShortcutRepo.GetByTypeAsync(ShortcutModel.Types.ReserveVirtualSafe);

        if (openSafeShortcutResult.IsSucceeded)
        {
            ViewModel.OpenSafeShortcut = openSafeShortcutResult.Value;

            KeyUpStore
                .WithName($"{nameof(SafeDetailsPage)}_{nameof(OnOpenSafeShortcut)}")
                .Add(OnOpenSafeShortcut);
        }

        if (reserveSafeShortcutResult.IsSucceeded)
        {
            ViewModel.ReserveSafeShortcut = reserveSafeShortcutResult.Value;

            KeyUpStore
                .WithName($"{nameof(SafeDetailsPage)}_{nameof(OnReserveSafeShortcut)}")
                .Add(OnReserveSafeShortcut);
        }
    }

    public void Dispose()
    {
        KeyUpStore.Remove(shortcut => shortcut.Key.Contains(nameof(SafeDetailsPage)));
    }

    private Task OnOpenSafeShortcut(ShortcutEntity shortcut)
    {
        if (ViewModel.OpenSafeShortcut is null || ViewModel.VirtualSafe is null) return Task.CompletedTask;
        if (shortcut != ViewModel.OpenSafeShortcut) return Task.CompletedTask;

        FileOpenerService.Open(ViewModel.VirtualSafe.Directory);

        return Task.CompletedTask;
    }

    private async Task OnReserveSafeShortcut(ShortcutEntity shortcut)
    {
        if (ViewModel.ReserveSafeShortcut is null || ViewModel.VirtualSafe is null) return;
        if (shortcut != ViewModel.ReserveSafeShortcut) return;

        await ViewModel.ReservationProgress.ShowAsync();

        await LogBuilder
                .WithDelegate(ViewModel.VirtualSafe.Reservation.Patheds
                    .Select(el => new Action(() => el.CopyToAsSub(ViewModel.VirtualSafe.Path))))
                .WithParameters(new()
                {
                    VirtualSafeDetailsId = ViewModel.VirtualSafe.Details.Id,
                    Operations = ViewModel.VirtualSafe.Reservation.Patheds
                        .Select(el => new LogBuilderOpsParams.OperationsParams()
                        {
                            ItemPath = el.Path,
                            Type = LogOperationModel.Types.TransferToVirtualSafe
                        })
                        .ToList()
                })
                .Build()
                .LogResultAsync(LogRepo);

        ViewModel.VirtualSafe.Details.ReservedTimestamp = DateTime.Now;
        await VirtualSafeDetailsRepo.UpdateAsync(ViewModel.VirtualSafe.Details);

        StateHasChanged();

        await Task.Delay(1000);

        await ViewModel.ReservationProgress.HideAsync();
    }

    private async Task OnReserveSafeClick()
    {
        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        await ViewModel.ReservationProgress.ShowAsync();

        await LogBuilder
                .WithDelegate(ViewModel.VirtualSafe.Reservation.Patheds
                    .Select(el => new Action(() => el.CopyToAsSub(ViewModel.VirtualSafe.Path))))
                .WithParameters(new()
                {
                    VirtualSafeDetailsId = ViewModel.VirtualSafe.Details.Id,
                    Operations = ViewModel.VirtualSafe.Reservation.Patheds
                        .Select(el => new LogBuilderOpsParams.OperationsParams()
                        {
                            ItemPath = el.Path,
                            Type = LogOperationModel.Types.TransferToVirtualSafe
                        })
                        .ToList()
                })
                .Build()
                .LogResultAsync(LogRepo);

        ViewModel.VirtualSafe.Details.ReservedTimestamp = DateTime.Now;
        await VirtualSafeDetailsRepo.UpdateAsync(ViewModel.VirtualSafe.Details);

        StateHasChanged();

        await Task.Delay(1000);

        await ViewModel.ReservationProgress.HideAsync();
    }

    private async Task OnDeleteSafeClick()
    {
        await ViewModel.DeleteModal.HideAsync();

        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.DeleteFailedModal.ShowAsync();
            return;
        }

        var result = await VirtualSafeRepo.RemoveAsync(ViewModel.VirtualSafe);

        if (result.IsSucceeded)
            await ViewModel.DeleteSucceededModal.ShowAsync();
        else
            await ViewModel.DeleteFailedModal.ShowAsync();
    }

    private async Task OnSaveTimeClick()
    {
        await ViewModel.ReserveTimeChangingConfirmModal.HideAsync();

        if (ViewModel.VirtualSafe is null) return;
        if (ViewModel.ReservationTimeOnly is null)
        {
            await ViewModel.NotEnteredReserveTimeModal.ShowAsync();
            return;
        }

        ViewModel.VirtualSafe.Reservation.ToReserveTimeSpan = TimeSpan.Parse($"{ViewModel.ReservationTimeOnly.Value.Hour}:{ViewModel.ReservationTimeOnly.Value.Minute}:00");

        await ReservationRepo.UpdateAsync(ViewModel.VirtualSafe.Reservation);

        await ViewModel.ReserveTimeChangingSucceededModal.ShowAsync();
    }

    private async Task OnClearTimeClick()
    {
        await ViewModel.ReserveTimeClearingConfirmModal.HideAsync();

        if (ViewModel.VirtualSafe is null) return;

        ViewModel.VirtualSafe.Reservation.ToReserveTimeSpan = null;

        await ReservationRepo.UpdateAsync(ViewModel.VirtualSafe.Reservation);

        ViewModel.ReservationTimeOnly = null;

        await ViewModel.ReserveTimeChangingSucceededModal.ShowAsync();
    }
}

