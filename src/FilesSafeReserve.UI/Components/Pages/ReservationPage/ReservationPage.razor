@page "/virtual-safe/reservation/{id}"

@using CommunityToolkit.Maui.Storage
@using FilesSafeReserve.App.Builders.IBuilders
@using FilesSafeReserve.App.Entities
@using FilesSafeReserve.App.Entities.Params.ILogBuilder
@using FilesSafeReserve.App.Entities.Results.Basic
@using FilesSafeReserve.App.Models
@using FilesSafeReserve.Domain.Entities
@using FilesSafeReserve.Domain.Extensions
@using FilesSafeReserve.Domain.Interfaces
@using FilesSafeReserve.Domain.Mappers
@using FilesSafeReserve.Infra.Extensions
@using FilesSafeReserve.Infra.Repositories.IRepositories
@using FilesSafeReserve.Infra.Services.IServices
@using FilesSafeReserve.UI.Data.Stores
@using System.Diagnostics

@inject IFileOpenerService FileOpenerService
@inject IVirtualSafeRepo VirtualSafeRepo
@inject ILogRepo LogRepo
@inject IVirtualSafeDetailsRepo VirtualSafeDetailsRepo
@inject IDirectoryRepo DirectoryRepo
@inject IFileRepo FileRepo
@inject IShortcutRepo ShortcutRepo
@inject ILogBuilder LogBuilder

@implements IDisposable

<Modal @ref="ViewModel.AlreadyInReservationModal" title="Already In Reservation" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Picked item already exist in virtual safe reservation items, so it can't be saved as new reservation item.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="async () => await ViewModel.AlreadyInReservationModal.HideAsync()">Understood</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.IsInSafeDirectoryModal" title="Is In Safe Directory" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Picked item is in virtual safe directory, so it can't be saved as new reservation item.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="async () => await ViewModel.IsInSafeDirectoryModal.HideAsync()">Understood</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.NoItemWasPickedModal" title="No Item Was Picked" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        No item was picked to be saved as reservation item.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="async () => await ViewModel.NoItemWasPickedModal.HideAsync()">Understood</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.ReservationProgress" title="Reservation Progress" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Please wait for the reservation to complete.
    </BodyTemplate>
    <FooterTemplate>
        <div class="loader-container">
            <span class="loader"></span>
        </div>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.FilterProgress" title="Filter Progress" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Please wait for the filter to complete.
    </BodyTemplate>
    <FooterTemplate>
        <div class="loader-container">
            <span class="loader"></span>
        </div>
    </FooterTemplate>
</Modal>

<Modal @ref="ViewModel.EmptySearchFieldModal" title="Empty Search Field" UseStaticBackdrop="true" CloseOnEscape="false" ShowCloseButton="false">
    <BodyTemplate>
        Please enter the text in the search field first, and then search.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="async () => await ViewModel.EmptySearchFieldModal.HideAsync()">Understood</Button>
    </FooterTemplate>
</Modal>

<div class="main-container">
    <div class="header-container gradient-background">
        <h3>Reservation Page</h3>
    </div>

    <div class="body-container gradient-background">
        @if (ViewModel.VirtualSafe is not null)
        {
            <div class="name-container">
                <h4>@ViewModel.VirtualSafe.Name</h4>
            </div>

            @if (ViewModel.VirtualSafe.Directory.Exists is false)
            {
                @if (ViewModel.VirtualSafe.Details.IsRemovable)
                {
                    @if (ViewModel.VirtualSafe.Details.RemovableDrive.Info.IsReady)
                    {
                        <div class="watchers-alert-container">
                            <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> Virtual safe directory does not exist in the file system. </Alert>
                        </div>
                    }
                    else
                    {
                        <div class="watchers-alert-container">
                            <Alert Color="AlertColor.Info"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> Please insert a removable drive '@ViewModel.VirtualSafe.Details.RemovableDrive.VolumeLabel' to fully manage the virtual safe. </Alert>
                        </div>
                    }
                }
                else
                {
                    <div class="watchers-alert-container">
                        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> Virtual safe directory does not exist in the file system. </Alert>
                    </div>
                }
            }

            <div class="btns-container btns-container-grid">
                @if (   ViewModel.VirtualSafe.Directory.Exists is false && !ViewModel.VirtualSafe.Details.IsRemovable
                    ||  ViewModel.VirtualSafe.Directory.Exists is false && ViewModel.VirtualSafe.Details.IsRemovable && ViewModel.VirtualSafe.Details.RemovableDrive.Info.IsReady)
                {
                    <Button @onclick='() => ViewModel.VirtualSafe.Directory.Create()' Color="ButtonColor.Info"> Restore </Button>
                }

                @if (ViewModel.VirtualSafe.Directory.Exists)
                {
                    <Button @onclick='() => FileOpenerService.Open(ViewModel.VirtualSafe.Directory)' Color="ButtonColor.Primary" Style="width: 120px"> Open </Button>

                    <Button @onclick='OnReserveSafeClick' Color="ButtonColor.Primary" Style="width: 120px"> Reserve </Button>
                }

                <Button onclick="history.back();" Color="ButtonColor.Secondary" Style="width: 120px"> Go Back </Button>
            </div>

            <div class="reservation-container">
                <div class="reservation-header-container">
                    <h5> Virtual safe items to reserve </h5>
                </div>

                <div>
                    <div class="input-group mb-3">
                        <InputText @bind-Value="ViewModel.SearchText" type="text" class="form-control" placeholder="Search" aria-label="Path to safe" aria-describedby="basic-addon2" />
                        <div class="input-group-append">
                            <Button @onclick="OnSearchClick" Color="ButtonColor.Secondary" Style="@SearchButtonStyle"><Icon Name="IconName.Search"></Icon></Button>
                            @if (ViewModel.IsSearched)
                            {
                                <Button @onclick="OnClearClick" Color="ButtonColor.Danger" Style="border-bottom-left-radius: 0px; border-top-left-radius: 0px;"><Icon Name="IconName.XCircle"></Icon></Button>
                            }
                        </div>
                    </div>
                </div>

                <div class="reservation-switches-container">
                    <Switch @bind-Value="ViewModel.IncludeFiles" Label="Include Files" @onclick="ToggleFilesSwitch" />

                    <Switch @bind-Value="ViewModel.IncludeDirectories" Label="Include Directories" @onclick="ToggleDirectoriesSwitch" />
                </div>

                <div class="reservation-btns-container">
                    <Button @onclick='OnPickFolderToReserveClick' Color="ButtonColor.Primary" Style="width: 120px"> Pick Folder </Button>

                    <Button @onclick='OnPickFileToReserveClick' Color="ButtonColor.Primary" Style="width: 120px"> Pick File </Button>
                </div>

                <div class="reservation-elements-container">
                    @if (ViewModel.ItemsList.Count is not 0)
                    {
                        @foreach (var item in ViewModel.ItemsList.OrderBy(item => item.Value.Type)
                                                                 .ThenBy(item => item.Value.Name))
                        {
                            <div class="reservation-element-container">
                                <div class="reservation-element-data gradient-background">
                                    <div class="reservation-element-icon">
                                        @if (item.Value.Type is ShyFsType.Directory)
                                        {
                                            <Icon Name="IconName.Folder" @onclick='() => FileOpenerService.Open(item.Value)' />
                                        }
                                        else if (item.Value.Type is ShyFsType.File)
                                        {
                                            <Icon Name="IconName.FileEarmark" @onclick='() => FileOpenerService.Open(item.Value)' />
                                        }
                                        else
                                        {
                                            <Icon Name="IconName.Question" @onclick='async () => await ViewModel.UnknownFileModal.ShowAsync()' />
                                        }
                                    </div>
                                    <div class="reservation-element-name">
                                        <span>@item.Value.Name</span>
                                    </div>
                                </div>
                                <div class="reservation-element-btns">
                                    @if (item.Value.Type is ShyFsType.Directory)
                                    {
                                        @if (ViewModel.VirtualSafe.Directory.Exists)
                                        {
                                            <Button Color="ButtonColor.Primary" @onclick='async () => OnReserveClick(item)'> <i class="bi bi-folder-symlink reservation-element-btn" /> </Button>
                                        }

                                        <Button Color="ButtonColor.Secondary" @onclick='() => FileOpenerService.Open( item.Value.ToShyDirectory().Info.Parent is null 
                                                                                                                    ? item.Value.ToShyDirectory().Info.Root.ToString() 
                                                                                                                    : item.Value.ToShyDirectory().Info.Parent!.FullName)'> 
                                            <i class="bi bi-folder2-open reservation-element-btn" />
                                        </Button>
                                    }
                                    else if (item.Value.Type is ShyFsType.File)
                                    {
                                        @if (ViewModel.VirtualSafe.Directory.Exists)
                                        {
                                            <Button Color="ButtonColor.Primary" @onclick='async () => OnReserveClick(item)'> <i class="bi bi-file-earmark-arrow-up reservation-element-btn" /> </Button>
                                        }

                                        <Button Color="ButtonColor.Secondary" @onclick='() => FileOpenerService.Open(item.Value.ToShyFile().Info.Directory!.FullName)'>
                                            <i class="bi bi-folder2-open reservation-element-btn" />
                                        </Button>
                                    }

                                    <Button Color="ButtonColor.Danger" @onclick='async () => await OnRemoveClick(item)'> <i class="bi bi-folder-x reservation-element-btn" /> </Button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert-container">
                            <Alert Color="AlertColor.Info"> <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon> Not a single item to reserve was found. </Alert>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    public string SearchButtonStyle = "border-bottom-left-radius: 0px; border-top-left-radius: 0px;";

    protected async override void OnInitialized()
    {
        var safeResult = await VirtualSafeRepo.GetByIdAsync(new Guid(Id));

        if (safeResult.IsSucceeded is false)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        ViewModel.VirtualSafe = safeResult.Value;

        ViewModel.ItemsList = ViewModel.VirtualSafe.Reservation.IdsPathedsPair;

        var openSafeShortcutResult = await ShortcutRepo.GetByTypeAsync(ShortcutModel.Types.OpenVirtualSafe);
        var reserveSafeShortcutResult = await ShortcutRepo.GetByTypeAsync(ShortcutModel.Types.ReserveVirtualSafe);

        if (openSafeShortcutResult.IsSucceeded)
        {
            ViewModel.OpenSafeShortcut = openSafeShortcutResult.Value;

            KeyUpStore
                .WithName($"{nameof(ReservationPage)}_{nameof(OnOpenSafeShortcut)}")
                .Add(OnOpenSafeShortcut);
        }

        if (reserveSafeShortcutResult.IsSucceeded)
        {
            ViewModel.ReserveSafeShortcut = reserveSafeShortcutResult.Value;

            KeyUpStore
                .WithName($"{nameof(ReservationPage)}_{nameof(OnReserveSafeShortcut)}")
                .Add(OnReserveSafeShortcut);
        }

        ViewModel.DriveWatcher = new()
            {
                Types = [DriveType.Removable],
            };

        ViewModel.DriveWatcher.DrivesChanged += async (ICollection<DriveInfo> drives) => await ResetFileSystemWatchers();

        await ViewModel.DriveWatcher.EnsureStartedAsync();
    }

    public async Task ResetFileSystemWatchers()
    {
        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        ViewModel.FileSystemWatchers.ForEach(watcher => watcher.Dispose());
        ViewModel.FileSystemWatchers.Clear();

        if (    !ViewModel.VirtualSafe.Details.IsRemovable
            ||  ViewModel.VirtualSafe.Details.RemovableDrive.Info.IsReady)
        {
            ViewModel.FileSystemWatchers.Add(new()
            {
                Path = ViewModel.VirtualSafe.Directory.Info.Parent?.FullName is null
                     ? ViewModel.VirtualSafe.Directory.Info.Root.FullName
                     : ViewModel.VirtualSafe.Directory.Info.Parent!.FullName,
                Filter = ViewModel.VirtualSafe.Directory.Name,
                NotifyFilter = NotifyFilters.DirectoryName,
                EnableRaisingEvents = true,
            });

            ViewModel.FileSystemWatchers.First().Deleted += async (sender, e) => await InvokeAsync(StateHasChanged);
        }

        ViewModel.FileSystemWatchers.AddRange(ViewModel.VirtualSafe.Reservation.Files
                                         .Where(file => DriveInfo.GetDrives()
                                                                 .Where(drive => drive.IsReady)
                                                                 .Any(drive => file.Path.Contains(drive.Name)))
                                         .Select(file => new FileSystemWatcher()
                                             {
                                                 Path = file.Info.DirectoryName!,
                                                 Filter = file.Name,
                                                 NotifyFilter = NotifyFilters.FileName,
                                                 EnableRaisingEvents = true,
                                             })
        );

        ViewModel.FileSystemWatchers.AddRange(ViewModel.VirtualSafe.Reservation.Directories
                                         .Where(dir => DriveInfo.GetDrives()
                                                                .Where(drive => drive.IsReady)
                                                                .Any(drive => dir.Path.Contains(drive.Name)))
                                         .Select(dir => new FileSystemWatcher()
                                             {
                                                 Path = dir.Info.Parent is null
                                                      ? dir.Info.Root.ToString()
                                                      : dir.Info.Parent.FullName,
                                                 Filter = dir.Name,
                                                 NotifyFilter = NotifyFilters.DirectoryName,
                                                 EnableRaisingEvents = true,
                                             })
        );

        ViewModel.FileSystemWatchers.ForEach(watcher => watcher.Deleted += async (sender, e) => await InvokeAsync(StateHasChanged));

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        KeyUpStore.Remove(shortcut => shortcut.Key.Contains(nameof(SafeDetailsPage)));
        ViewModel.Dispose();
    }

    private Task OnOpenSafeShortcut(ShortcutEntity shortcut)
    {
        if (ViewModel.OpenSafeShortcut is null || ViewModel.VirtualSafe is null) return Task.CompletedTask;
        if (shortcut != ViewModel.OpenSafeShortcut) return Task.CompletedTask;
        if (ViewModel.VirtualSafe.Directory.Exists is false) return Task.CompletedTask;

        FileOpenerService.Open(ViewModel.VirtualSafe.Directory);

        return Task.CompletedTask;
    }

    private async Task OnReserveSafeShortcut(ShortcutEntity shortcut)
    {
        if (ViewModel.ReserveSafeShortcut is null || ViewModel.VirtualSafe is null) return;
        if (shortcut != ViewModel.ReserveSafeShortcut) return;
        if (ViewModel.VirtualSafe.Directory.Exists is false) return;

        await ViewModel.ReservationProgress.ShowAsync();

        await LogBuilder
                .WithDelegate(ViewModel.VirtualSafe.Reservation.Patheds
                    .Select(el => new Action(() => el.CopyToAsSub(ViewModel.VirtualSafe.Path))))
                .WithParameters(new()
                {
                    VirtualSafeDetailsId = ViewModel.VirtualSafe.Details.Id,
                    Operations = ViewModel.VirtualSafe.Reservation.Patheds
                                    .Select(el => new LogBuilderOpsParams.OperationsParams()
                                    {
                                        ItemPath = el.Path,
                                        Type = LogOperationModel.Types.TransferToVirtualSafe
                                    })
                                    .ToList()
                })
                .Build()
                .LogResultAsync(LogRepo);

        ViewModel.VirtualSafe.Details.ReservedTimestamp = DateTime.Now;
        await VirtualSafeDetailsRepo.UpdateAsync(ViewModel.VirtualSafe.Details);

        StateHasChanged();

        await Task.Delay(1000);

        await ViewModel.ReservationProgress.HideAsync();
    }


    private async Task ToggleDirectoriesSwitch()
    {
        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        ViewModel.ItemsList = await FilterPathedsAsync
        (
            ViewModel.VirtualSafe.Reservation.IdsPathedsPair,
            ViewModel.SearchText,
            ViewModel.IncludeFiles,
            !ViewModel.IncludeDirectories
        );
    }

    private async Task ToggleFilesSwitch()
    {
        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        ViewModel.ItemsList = await FilterPathedsAsync
        (
            ViewModel.VirtualSafe.Reservation.IdsPathedsPair,
            ViewModel.SearchText,
            !ViewModel.IncludeFiles,
            ViewModel.IncludeDirectories
        );
    }

    private async Task OnSearchClick()
    {
        if (ViewModel.SearchText == string.Empty)
        {
            await ViewModel.EmptySearchFieldModal.ShowAsync();
            return;
        }

        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        ViewModel.ItemsList = await FilterPathedsAsync
        (
            ViewModel.VirtualSafe.Reservation.IdsPathedsPair,
            ViewModel.SearchText,
            ViewModel.IncludeFiles,
            ViewModel.IncludeDirectories
        );

        ViewModel.IsSearched = true;

        SearchButtonStyle = "border-radius: 0px;";
    }

    private async Task OnClearClick()
    {
        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        ViewModel.SearchText = string.Empty;

        ViewModel.ItemsList = await FilterPathedsAsync
        (
            ViewModel.VirtualSafe.Reservation.IdsPathedsPair,
            ViewModel.SearchText,
            ViewModel.IncludeFiles,
            ViewModel.IncludeDirectories
        );

        ViewModel.IsSearched = false;

        SearchButtonStyle = "border-bottom-left-radius: 0px; border-top-left-radius: 0px;";
    }

    private async Task OnReserveSafeClick()
    {
        if (ViewModel.VirtualSafe is null)
        {
            await ViewModel.NotFoundModal.ShowAsync();
            return;
        }

        await ViewModel.ReservationProgress.ShowAsync();

        await LogBuilder
                .WithDelegate(ViewModel.ItemsList.Select(el => new Action(() => el.Value.CopyToAsSub(ViewModel.VirtualSafe.Path))))
                .WithParameters(new()
                {
                    VirtualSafeDetailsId = ViewModel.VirtualSafe.Details.Id,
                    Operations = ViewModel.ItemsList
                                    .Select(el => new LogBuilderOpsParams.OperationsParams()
                                    {
                                        ItemPath = el.Value.Path,
                                        Type = LogOperationModel.Types.TransferToVirtualSafe
                                    })
                                    .ToList()
                })
                .Build()
                .LogResultAsync(LogRepo);

        ViewModel.VirtualSafe.Details.ReservedTimestamp = DateTime.Now;
        await VirtualSafeDetailsRepo.UpdateAsync(ViewModel.VirtualSafe.Details);

        StateHasChanged();

        await Task.Delay(1000);

        await ViewModel.ReservationProgress.HideAsync();
    }

    private async void OnReserveClick(KeyValuePair<Guid, IShyPathed> item)
    {
        if (ViewModel.VirtualSafe is null) return;

        await ViewModel.ReservationProgress.ShowAsync();

        await LogBuilder
                 .WithDelegate(() => item.Value.CopyToAsSub(ViewModel.VirtualSafe.Path))
                 .WithParameters(new()
                 {
                     VirtualSafeDetailsId = ViewModel.VirtualSafe.Details.Id,
                     Type = LogOperationModel.Types.TransferToVirtualSafe,
                     ItemPath = item.Value.Path,
                 })
                 .Build()
                 .LogResultAsync(LogRepo);

        ViewModel.VirtualSafe.Details.ReservedTimestamp = DateTime.Now;
        await VirtualSafeDetailsRepo.UpdateAsync(ViewModel.VirtualSafe.Details);

        await Task.Delay(1000);

        await ViewModel.ReservationProgress.HideAsync();
    }

    private async Task OnRemoveClick(KeyValuePair<Guid, IShyPathed> item)
    {
        if (ViewModel.VirtualSafe is null) return;

        await LogBuilder
                .WithDelegate(async () =>
                {
                    ResultEntity result;

                    if (item.Value.Type is ShyFsType.Directory)
                        result = await DirectoryRepo.RemoveByIdAsync(item.Key);
                    else if (item.Value.Type is ShyFsType.File)
                        result = await FileRepo.RemoveByIdAsync(item.Key);
                    else
                    {
                        result = false;

                        var dirResult = await DirectoryRepo.GetByPathAsync(item.Value.Path);
                        if (dirResult.IsSucceeded) result = await DirectoryRepo.RemoveByIdAsync(item.Key);

                        var fileResult = await FileRepo.GetByPathAsync(item.Value.Path);
                        if (fileResult.IsSucceeded) result = await FileRepo.RemoveByIdAsync(item.Key);
                    }

                    return result;
                })
                .WithCriterion(res => res.IsSucceeded)
                .WithParameters(new()
                {
                    VirtualSafeDetailsId = ViewModel.VirtualSafe.Details.Id,
                    Type = LogOperationModel.Types.RemoveFromReservation,
                    ItemPath = item.Value.Path,
                })
                .BuildAsync();

        ViewModel.ItemsList = await FilterPathedsAsync
        (
            ViewModel.VirtualSafe.Reservation.IdsPathedsPair,
            ViewModel.SearchText,
            ViewModel.IncludeFiles,
            ViewModel.IncludeDirectories
        );
    }

    private async Task OnPickFolderToReserveClick()
    {
        var result = await FolderPicker.PickAsync(default);

        if (result.Folder is null || ViewModel.VirtualSafe is null)
        {
            await ViewModel.NoItemWasPickedModal.ShowAsync();
            return;
        }

        if (result.Folder.Path.Contains(ViewModel.VirtualSafe.Path))
        {
            await ViewModel.IsInSafeDirectoryModal.ShowAsync();
            return;
        }

        if (ViewModel.VirtualSafe.Reservation.Directories.Any(el => el.Path == result.Folder.Path))
        {
            await ViewModel.AlreadyInReservationModal.ShowAsync();
            return;
        }

        await LogBuilder
                .WithDelegate(async () =>
                {
                    await DirectoryRepo.AddAsync(new()
                    {
                        Path = result.Folder.Path,
                        ReservationId = ViewModel.VirtualSafe.Reservation.Id
                    });
                })
                .WithParameters(new()
                {
                    VirtualSafeDetailsId = ViewModel.VirtualSafe!.Details.Id,
                    Type = LogOperationModel.Types.AddToReservation,
                    ItemPath = result.Folder.Path
                })
                .BuildAsync();

        await ResetFileSystemWatchers();

        ViewModel.ItemsList = await FilterPathedsAsync
        (
            ViewModel.VirtualSafe.Reservation.IdsPathedsPair,
            ViewModel.SearchText,
            ViewModel.IncludeFiles,
            ViewModel.IncludeDirectories
        );
    }

    private async Task OnPickFileToReserveClick()
    {
        var result = await FilePicker.PickAsync(default);

        if (result is null || ViewModel.VirtualSafe is null)
        {
            await ViewModel.NoItemWasPickedModal.ShowAsync();
            return;
        }

        if (result.FullPath.Contains(ViewModel.VirtualSafe.Path))
        {
            await ViewModel.IsInSafeDirectoryModal.ShowAsync();
            return;
        }

        if (ViewModel.VirtualSafe.Reservation.Files.Any(el => el.Path == result.FullPath))
        {
            await ViewModel.AlreadyInReservationModal.ShowAsync();
            return;
        }

        await LogBuilder
                .WithDelegate(async () =>
                {
                    await FileRepo.AddAsync(new()
                    {
                        Path = result.FullPath,
                        ReservationId = ViewModel.VirtualSafe.Reservation.Id
                    });
                })
                .WithParameters(new()
                {
                    VirtualSafeDetailsId = ViewModel.VirtualSafe!.Details.Id,
                    Type = LogOperationModel.Types.AddToReservation,
                    ItemPath = result.FullPath
                })
                .BuildAsync();

        await ResetFileSystemWatchers();

        ViewModel.ItemsList = await FilterPathedsAsync
        (
            ViewModel.VirtualSafe.Reservation.IdsPathedsPair,
            ViewModel.SearchText,
            ViewModel.IncludeFiles,
            ViewModel.IncludeDirectories
        );
    }

    private async Task<ICollection<KeyValuePair<Guid, IShyPathed>>> FilterPathedsAsync(IEnumerable<KeyValuePair<Guid, IShyPathed>> enumerable, string searchText, bool includeFiles, bool includeDirectories)
    {
        Stopwatch stopwatch = new Stopwatch();

        stopwatch.Start();

        bool IsOneSecondElapsed = false;

        if (searchText != string.Empty)
            enumerable = enumerable.Where(el => el.Value.Name.Contains(searchText));

        if (stopwatch.ElapsedMilliseconds >= 1000)
        {
            await ViewModel.FilterProgress.ShowAsync();
            IsOneSecondElapsed = true;
        }

        if (includeFiles is false)
            enumerable = enumerable.Where(el => el.Value.Type != ShyFsType.File);

        if (stopwatch.ElapsedMilliseconds >= 1000)
        {
            await ViewModel.FilterProgress.ShowAsync();
            IsOneSecondElapsed = true;
        }

        if (includeDirectories is false)
            enumerable = enumerable.Where(el => el.Value.Type != ShyFsType.Directory);

        if (IsOneSecondElapsed)
        {
            await Task.Delay(1000);
            await ViewModel.FilterProgress.HideAsync();
        }

        stopwatch.Stop();

        return enumerable.ToList();
    }
}